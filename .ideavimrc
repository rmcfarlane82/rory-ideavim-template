"" Rory ideavimrc

"" ========================================================
""" Base Settings
"" ========================================================

" General behavior
set scrolloff=10                            " Keep 10 lines on screen when scrolling
set linenumber                              " Show line numbers
set showmode                                " Show the current mode at the bottom
set showcmd              " Display executed commands at the bottom
set visualbell           " Stop the annoying bell sound
set clipboard+=unnamedplus                 " Use system clipboard
filetype plugin indent on                  " Enable automatic filetype detection, filetype-specific plugins/indentation

" Indentation
set autoindent                             " Keep the indent when creating a new line
set smarttab                               " Use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set cindent                                " Recommended seting for automatic C-style indentation
set autoindent                             " Automatic indentation in non-C files
set foldmethod=indent                      " Fold based on source indentation
set foldlevelstart=99                      " Expand all folds by default

" Set the tab width to 4 spaces
set tabstop=4
set shiftwidth=4
set ttyfast                                " More smooth screen redrawing

" make p paste normally, i.e. without yanking the replaced text https://superuser.com/questions/321547/how-do-i-replace-paste-yanked-text-in-vim-without-yanking-the-deleted-lines
vnoremap p "_dP 
nnoremap dd "_dd

"" ========================================================
""" Search Optimizations
"" ========================================================

set ignorecase           " Case-insensitive search
set smartcase            " Case-sensitive only if uppercase is used
set incsearch            " Search as you type
set hlsearch             " Highlight all matches

"" ========================================================
""" Third Party Plugins
"" ========================================================

set surround             " Enable text surround changes
set highlightedyank      " Highlight text after copying
set nerdtree             " File explorer with Vim-style navigation
set easymotion           " Quick cursor navigation
set notimeout            " Disable timeout waiting for keypress
set which-key            " Display key mappings
set notimeout            " disable the timeout option
set timeoutlen=5000      " increase the timeoutlen (default: 1000), don't add space around the equal sign

"" ========================================================
""" Plugin Settings
"" ========================================================

" Which-Key Visuals
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

"" ========================================================
""" Leader Key Configuration
"" ========================================================

let mapleader = " "
let g:WhichKeyDesc_leader = "<leader><leader>"
let g:WhichKeyDesc_commentray_prefix = "<leader><leader>"

"" ========================================================
""" Toggle Mappings (Comments & Regions)
"" ========================================================

let g:WhichKeyDesc_toggle = "<leader><leader>t Toggle"
let g:WhichKeyDesc_toggle_comment = "<leader><leader>tc Comment"
let g:WhichKeyDesc_toggle_blockComment = "<leader><leader>tb Block Comment"
let g:WhichKeyDesc_toggle_region = "<leader><leader>tr Region"

map <leader><leader>tc <Action>(CommentByLineComment)
map <leader><leader>tb <Action>(CommentByBlockComment)
map <leader><leader>tr <Action>(SurroundWithRegion)

"" ========================================================
""" Refactor Mappings
"" ========================================================

let g:WhichKeyDesc_refactor = "<leader><leader>r Refactor"
let g:WhichKeyDesc_refactor_rename = "<leader><leader>rr Rename"
let g:WhichKeyDesc_refactor_extractVariable = "<leader><leader>rv Extract Variable"
let g:WhichKeyDesc_refactor_extractMethod = "<leader><leader>rm Extract Method"
let g:WhichKeyDesc_refactor_inline = "<leader><leader>ri Inline"

map <leader><leader>rr <Action>(RenameElement)
map <leader><leader>rv <Action>(IntroduceVariable)
map <leader><leader>rm <Action>(ExtractMethod)
map <leader><leader>ri <Action>(Inline)

"" ========================================================
""" Vim Mappings
"" ========================================================

let g:WhichKeyDesc_vim = "<leader><leader>v Vim"
let g:WhichKeyDesc_vim_reload = "<leader><leader>vr Reload ideavimrc"

nnoremap <leader><leader>vr :action IdeaVim.ReloadVimRc.reload<CR>

"" ========================================================
""" EasyMotion Mappings
"" ========================================================

let g:WhichKeyDesc_easymotion = "<leader><leader>j Jump with Easymotion"

map <leader><leader>j <Plug>(easymotion-s2)

"" ========================================================
""" Closing Windows
"" ========================================================

let g:WhichKeyDesc_close = "<leader><leader>c Close"
let g:WhichKeyDesc_close_others = "<leader><leader>co Close Other Tabs"
let g:WhichKeyDesc_close_activeTab = "<leader><leader>ca Close Active Tab"

map <leader><leader>co <Action>(CloseAllEditorsButActive)
map <leader><leader>ca <Action>(CloseContent)

"" ========================================================
""" GoTo Mappings
"" ========================================================

let g:WhichKeyDesc_goto = "<leader><leader>g Go to"
let g:WhichKeyDesc_goto_declaration = "<leader><leader>gd Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader><leader>gi Implementation"
let g:WhichKeyDesc_goto_type = "<leader><leader>gt Type"
let g:WhichKeyDesc_goto_line = "<leader><leader>gl Line"

map <leader><leader>gd <Action>(GotoDeclaration)
map <leader><leader>gi <Action>(GotoImplementation)
map <leader><leader>gt <Action>(GotoTypeDeclaration)
map <leader><leader>gl <Action>(GotoLine)

"" ========================================================
""" Normal Mode Mappings
"" ========================================================

nnoremap ; i

" Remap navigation keys
 nnoremap i k
 nnoremap k j
 nnoremap j h
 nnoremap l l

"" ========================================================
""" Visual Mode Mappings
"" ========================================================

" Navigation remapping in visual mode
vnoremap i k
vnoremap k j
vnoremap j h
vnoremap l l

"" ========================================================
""" Insert Mode Mappings
"" ========================================================

" Exit insert mode by typing 'jj'
inoremap jk <Esc>

" Popup menu navigation
inoremap <C-k> <Esc>:action PopupMenu-selectNext<CR>a
inoremap <C-i> <Esc>:action PopupMenu-selectPrev<CR>a

" adds undo steps for the characters listed
inoremap <Space> <C-g>u<Space>
inoremap . <C-g>u.
inoremap , <C-g>u,
inoremap <CR> <C-g>u<CR>
